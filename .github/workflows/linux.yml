name: Linux

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-18.04]
        build_type: [Debug, Release, RelWithDebInfo]
        cxx: [g++-8, g++-10, clang++-10]
        cxxstd: [20]
        libfmt: [7.1.3, 8.0.1, master]

    runs-on: ${{ matrix.os }}
    env:
      CXX: ${{ matrix.cxx }}
      FMT_SRC_DIR: ${{ github.workspace }}/third_party/fmt
      # SPDLOG_SRC_DIR: ${{ github.workspace }}/third_party/spdlog
      MODULE_PREFIX: ${{ github.workspace }}/third_party/module

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup apt packages
        run: |
          sudo apt-get update -q -y > /dev/null
          sudo apt-get install -q -y build-essential ninja-build cmake libgmp-dev libgtest-dev > /dev/null
          sudo apt-get install -q -y ${{ matrix.cxx }} > /dev/null
          ${{ matrix.cxx }} --version
          cmake --version

      - name: Install Boost
        run: |
          wget https://boostorg.jfrog.io/artifactory/main/release/1.76.0/source/boost_1_76_0.tar.bz2
          tar xf boost_1_76_0.tar.bz2
          cd boost_1_76_0
          ./bootstrap.sh
          sudo ./b2 -j $(nproc) install

      - name: Download libfmt
        run: |
          git clone https://github.com/fmtlib/fmt.git $FMT_SRC_DIR
          cd $FMT_SRC_DIR
          git checkout -b v${{ matrix.libfmt }} ${{ matrix.libfmt }}

      # - name: Download libspdlog
      #   run: |
      #     git clone https://github.com/gabime/spdlog.git $SPDLOG_SRC_DIR
      #     cd $SPDLOG_SRC_DIR
      #     git checkout -b our_reference 6491abb519a6a15792c1c6717270ce6c9ba4d72e
      #     git log -1 | cat

      - name: Install googletest for Ubuntu 18.04
        if: ${{ matrix.os == 'ubuntu-18.04' }}
        run: |
          cd /usr/src/googletest
          sudo cmake -G Ninja .
          sudo cmake --build . --target install

      - name: Install libfmt
        run: |
          mkdir -p $FMT_SRC_DIR/build
          cd $FMT_SRC_DIR/build
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_INSTALL_PREFIX=$MODULE_PREFIX \
            -DCMAKE_CXX_STANDARD=${{ matrix.cxxstd }} \
            $FMT_SRC_DIR
          cmake --build . --target install

      # - name: Install libspdlog
      #   run: |
      #     cd $SPDLOG_SRC_DIR
      #     cmake -G Ninja \
      #       -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
      #       -DCMAKE_INSTALL_PREFIX=$MODULE_PREFIX \
      #       -DCMAKE_CXX_STANDARD=${{ matrix.cxxstd }} \
      #       $SPDLOG_SRC_DIR
      #     cmake --build . --target install

      - name: Config
        run: |
          cmake -E make_directory build
          cd build
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_CXX_STANDARD=${{ matrix.cxxstd }} \
            ${{ github.workspace }}

      - name: Build
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake --build .

      - name: Show logs when failed
        if: ${{ failure() }}
        run: |
          cat "${{ github.workspace }}/build/CMakeFiles/CMakeOutput.log" || true
          echo ++++
          cat "${{ github.workspace }}/build/CMakeFiles/CMakeError.log" || true

      - name: Test
        working-directory: ${{ github.workspace }}/build
        run: ctest --output-on-failure
